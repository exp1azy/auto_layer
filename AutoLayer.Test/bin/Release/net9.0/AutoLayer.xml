<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AutoLayer</name>
    </assembly>
    <members>
        <member name="T:AutoLayer.AutoMapper">
            <summary>
            A static utility class for mapping between entities and models.
            Provides methods for transforming objects from one type to another.
            </summary>
        </member>
        <member name="M:AutoLayer.AutoMapper.MapToModel``1(System.Object)">
            <summary>
            Maps an entity to a model of type <typeparamref name="TModel"/>.
            </summary>
            <typeparam name="TModel">The type of the model to map to.</typeparam>
            <param name="entity">The entity object to map from.</param>
            <returns>A mapped instance of type <typeparamref name="TModel"/>.</returns>
            <exception cref="T:AutoLayer.Exceptions.NullEntityException">Thrown if the <paramref name="entity"/> is null.</exception>
            <exception cref="T:AutoLayer.Exceptions.MapException">Thrown if mapping fails due to property type mismatches.</exception>
        </member>
        <member name="M:AutoLayer.AutoMapper.MapToEntity``1(System.Object)">
            <summary>
            Maps a model to an entity of type <typeparamref name="TEntity"/>.
            </summary>
            <typeparam name="TEntity">The type of the entity to map to.</typeparam>
            <param name="model">The model object to map from.</param>
            <returns>A mapped instance of type <typeparamref name="TEntity"/>.</returns>
            <exception cref="T:AutoLayer.Exceptions.NullEntityException">Thrown if the <paramref name="model"/> is null.</exception>
            <exception cref="T:AutoLayer.Exceptions.MapException">Thrown if mapping fails due to property type mismatches.</exception>
        </member>
        <member name="M:AutoLayer.AutoMapper.MapToModelList``1(System.Collections.Generic.List{System.Object})">
            <summary>
            Maps a list of entities to a list of models of type <typeparamref name="TModel"/>.
            </summary>
            <typeparam name="TModel">The type of the model to map to.</typeparam>
            <param name="entities">The list of entities to map from.</param>
            <returns>A list of mapped models of type <typeparamref name="TModel"/>.</returns>
        </member>
        <member name="M:AutoLayer.AutoMapper.MapToEntityList``1(System.Collections.Generic.List{System.Object})">
            <summary>
            Maps a list of models to a list of entities of type <typeparamref name="TEntity"/>.
            </summary>
            <typeparam name="TEntity">The type of the entity to map to.</typeparam>
            <param name="models">The list of models to map from.</param>
            <returns>A list of mapped entities of type <typeparamref name="TEntity"/>.</returns>
        </member>
        <member name="M:AutoLayer.AutoMapper.FromEntityToModel``1(System.Object)">
            <summary>
            Converts an entity object to a model of type <typeparamref name="TModel"/>.
            </summary>
            <typeparam name="TModel">The type of the model to map to.</typeparam>
            <param name="entity">The entity object to map from.</param>
            <returns>A mapped instance of type <typeparamref name="TModel"/>.</returns>
            <exception cref="T:AutoLayer.Exceptions.NullEntityException">Thrown if the <paramref name="entity"/> is null.</exception>
            <exception cref="T:AutoLayer.Exceptions.MapException">Thrown if mapping fails due to property type mismatches or missing properties.</exception>
        </member>
        <member name="M:AutoLayer.AutoMapper.FromModelToEntity``1(System.Object)">
            <summary>
            Converts a model object to an entity of type <typeparamref name="TEntity"/>.
            </summary>
            <typeparam name="TEntity">The type of the entity to map to.</typeparam>
            <param name="model">The model object to map from.</param>
            <returns>A mapped instance of type <typeparamref name="TEntity"/>.</returns>
            <exception cref="T:AutoLayer.Exceptions.NullEntityException">Thrown if the <paramref name="model"/> is null.</exception>
            <exception cref="T:AutoLayer.Exceptions.MapException">Thrown if mapping fails due to property type mismatches or missing properties.</exception>
        </member>
        <member name="T:AutoLayer.Repository`1">
            <summary>
            A generic repository class for performing CRUD operations and interacting with the database.
            Provides a base implementation for working with entities in a given <see cref="T:Microsoft.EntityFrameworkCore.DbContext"/>.
            </summary>
            <typeparam name="TEntity">The type of the entity to operate on. Must be a reference type and have a parameterless constructor.</typeparam>
        </member>
        <member name="M:AutoLayer.Repository`1.#ctor(Microsoft.EntityFrameworkCore.DbContext)">
            <summary>
            Initializes a new instance of the <see cref="T:AutoLayer.Repository`1"/> class.
            </summary>
            <param name="dbContext"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:AutoLayer.Repository`1.GetById(System.Int32)">
            <summary>
            Retrieves an entity by its unique identifier.
            </summary>
            <param name="id">The unique identifier of the entity.</param>
            <returns>The entity with the specified identifier, or <c>null</c> if not found.</returns>
        </member>
        <member name="M:AutoLayer.Repository`1.GetAll(System.Boolean)">
            <summary>
            Retrieves all entities of the specified type from the database.
            </summary>
            <param name="asNoTracking">
            A flag indicating whether to retrieve entities without tracking them in the context. 
            Set to <c>true</c> to disable tracking, improving performance for read-only operations.
            </param>
            <returns>A collection of all entities.</returns>
        </member>
        <member name="M:AutoLayer.Repository`1.GetFirst(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean)">
            <summary>
            Retrieves the first entity that matches the specified condition.
            </summary>
            <param name="predicate">An expression that defines the condition to filter the entities.</param>
            <param name="asNoTracking">
            A flag indicating whether to retrieve the entity without tracking it in the context. 
            Set to <c>true</c> to disable tracking, improving performance for read-only operations.
            </param>
            <returns>The first entity matching the condition, or <c>null</c> if no entity is found.</returns>
        </member>
        <member name="M:AutoLayer.Repository`1.GetWhere(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean)">
            <summary>
            Retrieves all entities that match the specified condition.
            </summary>
            <param name="predicate">An expression that defines the condition to filter the entities.</param>
            <param name="asNoTracking">
            A flag indicating whether to retrieve entities without tracking them in the context. 
            Set to <c>true</c> to disable tracking, improving performance for read-only operations.
            </param>
            <returns>A collection of entities matching the condition.</returns>
        </member>
        <member name="M:AutoLayer.Repository`1.GetFirstWithRelated``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean)">
            <summary>
            Retrieves the first entity that matches the specified condition and includes related data.
            </summary>
            <typeparam name="TProperty">The type of the related property to include.</typeparam>
            <param name="condition">An expression specifying the condition to filter the entities.</param>
            <param name="include">An expression specifying the related property to include in the query.</param>
            <param name="asNoTracking">
            A flag indicating whether to retrieve the entity without tracking it in the context.
            Set to <c>true</c> for improved performance in read-only operations.
            </param>
            <returns>The first entity matching the condition with the specified related data included, or <c>null</c> if no entity is found.</returns>
        </member>
        <member name="M:AutoLayer.Repository`1.GetWithRelated``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean)">
            <summary>
            Retrieves all entities that match the specified condition and includes related data.
            </summary>
            <typeparam name="TProperty">The type of the related property to include.</typeparam>
            <param name="condition">An expression specifying the condition to filter the entities.</param>
            <param name="include">An expression specifying the related property to include in the query.</param>
            <param name="asNoTracking">
            A flag indicating whether to retrieve entities without tracking them in the context.
            Set to <c>true</c> for improved performance in read-only operations.
            </param>
            <returns>A collection of entities matching the condition with the specified related data included.</returns>
        </member>
        <member name="M:AutoLayer.Repository`1.Exists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Checks if any entity satisfies the specified condition.
            </summary>
            <param name="predicate">An expression specifying the condition to check against entities.</param>
            <returns><c>true</c> if any entity matches the condition; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:AutoLayer.Repository`1.IsEmpty">
            <summary>
            Checks if the repository is empty, i.e., contains no entities.
            </summary>
            <returns><c>true</c> if the repository contains no entities; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:AutoLayer.Repository`1.Count">
            <summary>
            Retrieves the total number of entities in the repository.
            </summary>
            <returns>The total count of entities.</returns>
        </member>
        <member name="M:AutoLayer.Repository`1.CountWhere(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Counts the number of entities that satisfy the specified condition.
            </summary>
            <param name="predicate">An expression specifying the condition to filter entities.</param>
            <returns>The count of entities that match the condition.</returns>
        </member>
        <member name="M:AutoLayer.Repository`1.Max(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})">
            <summary>
            Retrieves the maximum value of a specified property across all entities.
            </summary>
            <param name="selector">An expression specifying the property to evaluate for the maximum value.</param>
            <returns>The maximum value of the specified property.</returns>
        </member>
        <member name="M:AutoLayer.Repository`1.MaxWhere(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})">
            <summary>
            Retrieves the maximum value of a specified property for entities that satisfy a given condition.
            </summary>
            <param name="predicate">An expression specifying the condition to filter entities.</param>
            <param name="selector">An expression specifying the property to evaluate for the maximum value.</param>
            <returns>The maximum value of the specified property among entities that match the condition.</returns>
        </member>
        <member name="M:AutoLayer.Repository`1.Min(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})">
            <summary>
            Retrieves the minimum value of a specified property across all entities.
            </summary>
            <param name="selector">An expression specifying the property to evaluate for the minimum value.</param>
            <returns>The minimum value of the specified property.</returns>
        </member>
        <member name="M:AutoLayer.Repository`1.MinWhere(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})">
            <summary>
            Retrieves the minimum value of a specified property for entities that satisfy a given condition.
            </summary>
            <param name="predicate">An expression specifying the condition to filter entities.</param>
            <param name="selector">An expression specifying the property to evaluate for the minimum value.</param>
            <returns>The minimum value of the specified property among entities that match the condition.</returns>
        </member>
        <member name="M:AutoLayer.Repository`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})">
            <summary>
            Calculates the sum of a specified property across all entities.
            </summary>
            <param name="selector">An expression specifying the property to sum.</param>
            <returns>The total sum of the specified property.</returns>
        </member>
        <member name="M:AutoLayer.Repository`1.SumWhere(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})">
            <summary>
            Calculates the sum of a specified property for entities that satisfy a given condition.
            </summary>
            <param name="predicate">An expression specifying the condition to filter entities.</param>
            <param name="selector">An expression specifying the property to sum.</param>
            <returns>The total sum of the specified property among entities that match the condition.</returns>
        </member>
        <member name="M:AutoLayer.Repository`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})">
            <summary>
            Calculates the average value of a specified property across all entities.
            </summary>
            <param name="selector">An expression specifying the property to calculate the average for.</param>
            <returns>The average value of the specified property.</returns>
        </member>
        <member name="M:AutoLayer.Repository`1.AverageWhere(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})">
            <summary>
            Calculates the average value of a specified property for entities that satisfy a given condition.
            </summary>
            <param name="predicate">An expression specifying the condition to filter entities.</param>
            <param name="selector">An expression specifying the property to calculate the average for.</param>
            <returns>The average value of the specified property among entities that match the condition.</returns>
        </member>
        <member name="M:AutoLayer.Repository`1.GetQuery">
            <summary>
            Retrieves an <see cref="T:System.Linq.IQueryable`1"/> representing the current set of entities, allowing for advanced query composition.
            </summary>
            <returns>An <see cref="T:System.Linq.IQueryable`1"/> for building and executing LINQ queries.</returns>
        </member>
        <member name="M:AutoLayer.Repository`1.GetOrdered(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Boolean,System.Boolean)">
            <summary>
            Retrieves entities ordered by a specified property, with optional ordering direction and tracking settings.
            </summary>
            <param name="orderBy">An expression specifying the property to order entities by.</param>
            <param name="isAscending">Specifies the ordering direction. Default is ascending.</param>
            <param name="asNoTracking">Determines whether the entities should be retrieved without tracking. Default is <c>true</c>.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of ordered entities.</returns>
        </member>
        <member name="M:AutoLayer.Repository`1.GetPaged(System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Boolean,System.Boolean)">
            <summary>
            Retrieves a paginated collection of entities with optional sorting and tracking settings.
            </summary>
            <param name="pageNumber">The page number to retrieve. Must be greater than or equal to 1.</param>
            <param name="pageSize">The number of entities per page. Must be greater than 0.</param>
            <param name="orderBy">An optional expression specifying the property to sort by. Defaults to <c>null</c>.</param>
            <param name="isAscending">Specifies the sorting direction. Default is ascending.</param>
            <param name="asNoTracking">Determines whether the entities should be retrieved without tracking. Default is <c>true</c>.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> representing the requested page of entities.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="pageNumber"/> or <paramref name="pageSize"/> is less than the required minimum values.</exception>
        </member>
        <member name="M:AutoLayer.Repository`1.Add(`0)">
            <summary>
            Adds a new entity to the database context.
            </summary>
            <param name="entityToAdd">The entity to be added.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="entityToAdd"/> is <c>null</c>.</exception>
            <remarks>
            The changes will be persisted to the database upon calling <c>SaveChanges</c> on the <see cref="T:Microsoft.EntityFrameworkCore.DbContext"/>.
            </remarks>
        </member>
        <member name="M:AutoLayer.Repository`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds a collection of entities to the database context.
            </summary>
            <param name="entitiesToAdd">The collection of entities to be added.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="entitiesToAdd"/> is <c>null</c>.</exception>
            <remarks>
            The changes will be persisted to the database upon calling <c>SaveChanges</c> on the <see cref="T:Microsoft.EntityFrameworkCore.DbContext"/>.
            </remarks>
        </member>
        <member name="M:AutoLayer.Repository`1.Update(`0)">
            <summary>
            Updates an existing entity in the database context.
            </summary>
            <param name="entityToUpdate">The entity with updated values.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="entityToUpdate"/> is <c>null</c>.</exception>
            <remarks>
            The changes will be persisted to the database upon calling <c>SaveChanges</c> on the <see cref="T:Microsoft.EntityFrameworkCore.DbContext"/>.
            Ensure the entity is tracked by the context before calling this method.
            </remarks>
        </member>
        <member name="M:AutoLayer.Repository`1.UpdateById(System.Int32,System.Action{`0})">
            <summary>
            Updates an entity identified by its ID with the specified update action.
            </summary>
            <param name="id">The ID of the entity to update.</param>
            <param name="updateAction">An action that performs the update on the entity.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="updateAction"/> is <c>null</c>.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown if no entity with the specified <paramref name="id"/> is found.</exception>
            <remarks>
            The entity is fetched by its ID, updated with the specified action, and then persisted to the database upon calling <c>SaveChanges</c> on the <see cref="T:Microsoft.EntityFrameworkCore.DbContext"/>.
            </remarks>
        </member>
        <member name="M:AutoLayer.Repository`1.UpdateRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Updates a collection of entities in the database.
            </summary>
            <param name="entitiesToUpdate">The collection of entities to update.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="entitiesToUpdate"/> is <c>null</c>.</exception>
            <remarks>
            The changes will be persisted to the database upon calling <c>SaveChanges</c> on the <see cref="T:Microsoft.EntityFrameworkCore.DbContext"/>.
            </remarks>
        </member>
        <member name="M:AutoLayer.Repository`1.UpdateWhere(System.Func{`0,System.Boolean},System.Action{`0})">
            <summary>
            Updates entities that match the specified predicate with the provided update action.
            </summary>
            <param name="predicate">A function to filter the entities that need to be updated.</param>
            <param name="updateAction">An action that applies updates to the selected entities.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="updateAction"/> or <paramref name="predicate"/> is <c>null</c>.</exception>
            <remarks>
            The entities matching the predicate are fetched, updated with the specified action, and then persisted to the database.
            </remarks>
        </member>
        <member name="M:AutoLayer.Repository`1.Remove(`0)">
            <summary>
            Removes an entity from the database context.
            </summary>
            <param name="entityToRemove">The entity to remove from the database.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="entityToRemove"/> is <c>null</c>.</exception>
            <remarks>
            The entity will be deleted from the database when <c>SaveChanges</c> is called on the <see cref="T:Microsoft.EntityFrameworkCore.DbContext"/>.
            </remarks>
        </member>
        <member name="M:AutoLayer.Repository`1.RemoveById(System.Int32)">
            <summary>
            Removes an entity identified by its ID from the database.
            </summary>
            <param name="id">The ID of the entity to remove.</param>
            <exception cref="T:System.ArgumentException">Thrown if the entity with the specified ID is not found.</exception>
            <remarks>
            The entity with the specified ID is removed from the database upon calling <c>SaveChanges</c> on the <see cref="T:Microsoft.EntityFrameworkCore.DbContext"/>.
            </remarks>
        </member>
        <member name="M:AutoLayer.Repository`1.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Removes a collection of entities from the database.
            </summary>
            <param name="entitiesToRemove">The collection of entities to remove from the database.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="entitiesToRemove"/> is <c>null</c>.</exception>
            <remarks>
            The provided entities are removed from the database upon calling <c>SaveChanges</c> on the <see cref="T:Microsoft.EntityFrameworkCore.DbContext"/>.
            </remarks>
        </member>
        <member name="M:AutoLayer.Repository`1.RemoveWhere(System.Func{`0,System.Boolean})">
            <summary>
            Removes entities from the database that match the specified predicate.
            </summary>
            <param name="predicate">A function to filter the entities to be removed.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="predicate"/> is <c>null</c>.</exception>
            <remarks>
            Entities that match the provided predicate will be removed from the database when <c>SaveChanges</c> is called.
            </remarks>
        </member>
        <member name="M:AutoLayer.Repository`1.ExecuteTransaction(System.Func{System.Threading.Tasks.Task})">
            <summary>
            Executes a transaction with the provided action as part of the transaction scope.
            </summary>
            <param name="action">A function that represents the action to be executed within the transaction.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="action"/> is <c>null</c>.</exception>
            <remarks>
            The provided action is executed within a database transaction. If any exception occurs during execution,
            the transaction will be rolled back. The action is committed if it completes successfully.
            </remarks>
        </member>
        <member name="M:AutoLayer.Repository`1.ExecuteSqlRaw(System.String)">
            <summary>
            Executes a raw SQL query and returns a collection of entities based on the result.
            </summary>
            <param name="sqlQuery">The raw SQL query to execute.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> representing the entities returned by the query.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="sqlQuery"/> is <c>null</c> or empty.</exception>
            <remarks>
            This method allows execution of raw SQL queries that return a collection of entities. The query results are mapped to the corresponding entity type.
            </remarks>
        </member>
        <member name="M:AutoLayer.Repository`1.ExecuteSqlRawCommand(System.String)">
            <summary>
            Executes a raw SQL query that does not return any data, such as an UPDATE or DELETE operation.
            </summary>
            <param name="sqlQuery">The raw SQL query to execute.</param>
            <returns>The number of rows affected by the query.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="sqlQuery"/> is <c>null</c> or empty.</exception>
            <remarks>
            This method is useful for executing SQL commands that modify the database, such as INSERT, UPDATE, DELETE, etc.
            The result indicates the number of rows affected by the execution of the query.
            </remarks>
        </member>
        <member name="M:AutoLayer.Repository`1.GetByIdAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Asynchronously retrieves an entity by its identifier.
            </summary>
            <param name="id">The identifier of the entity to retrieve.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>A task representing the asynchronous operation, with a result of the entity, or <c>null</c> if not found.</returns>
            <remarks>
            This method allows the retrieval of an entity based on its identifier in an asynchronous manner.
            If no entity is found with the given identifier, <c>null</c> will be returned.
            </remarks>
        </member>
        <member name="M:AutoLayer.Repository`1.GetAllAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously retrieves all entities, optionally with or without tracking.
            </summary>
            <param name="asNoTracking">Specifies whether to disable entity tracking for performance improvements. Defaults to <c>true</c>.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>A task representing the asynchronous operation, with a result of a collection of all entities.</returns>
            <remarks>
            This method retrieves all entities asynchronously, with an option to disable entity tracking for read-only scenarios,
            improving performance by avoiding the need to track changes.
            </remarks>
        </member>
        <member name="M:AutoLayer.Repository`1.GetFirstAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously retrieves the first entity that matches the given predicate.
            </summary>
            <param name="predicate">The condition to match the entity against.</param>
            <param name="asNoTracking">Specifies whether to disable entity tracking for performance improvements. Defaults to <c>true</c>.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>A task representing the asynchronous operation, with a result of the first matching entity, or <c>null</c> if not found.</returns>
            <remarks>
            This method retrieves the first entity that satisfies the provided condition asynchronously.
            If no matching entity is found, <c>null</c> will be returned.
            </remarks>
        </member>
        <member name="M:AutoLayer.Repository`1.GetWhereAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously retrieves all entities that match the given predicate.
            </summary>
            <param name="predicate">The condition to match the entities against.</param>
            <param name="asNoTracking">Specifies whether to disable entity tracking for performance improvements. Defaults to <c>true</c>.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>A task representing the asynchronous operation, with a result of the matching entities.</returns>
            <remarks>
            This method retrieves all entities that satisfy the provided condition asynchronously.
            If no matching entities are found, an empty collection will be returned.
            </remarks>
        </member>
        <member name="M:AutoLayer.Repository`1.GetFirstWithRelatedAsync``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously retrieves the first entity that matches the given condition and includes related entities.
            </summary>
            <typeparam name="TProperty">The type of the related entity to include.</typeparam>
            <param name="condition">The condition to match the entity against.</param>
            <param name="include">The related entity to include in the query.</param>
            <param name="asNoTracking">Specifies whether to disable entity tracking for performance improvements. Defaults to <c>true</c>.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>A task representing the asynchronous operation, with a result of the first matching entity with related data, or <c>null</c> if not found.</returns>
            <remarks>
            This method retrieves the first entity that satisfies the provided condition asynchronously, along with its related data.
            If no matching entity is found, <c>null</c> will be returned.
            </remarks>
        </member>
        <member name="M:AutoLayer.Repository`1.GetWithRelatedAsync``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously retrieves all entities that match the given condition and includes related entities.
            </summary>
            <typeparam name="TProperty">The type of the related entity to include.</typeparam>
            <param name="condition">The condition to match the entities against.</param>
            <param name="include">The related entity to include in the query.</param>
            <param name="asNoTracking">Specifies whether to disable entity tracking for performance improvements. Defaults to <c>true</c>.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>A task representing the asynchronous operation, with a result of the matching entities along with their related data.</returns>
            <remarks>
            This method retrieves all entities that satisfy the provided condition asynchronously, along with their related data.
            If no matching entities are found, an empty collection will be returned.
            </remarks>
        </member>
        <member name="M:AutoLayer.Repository`1.ExistsAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously checks if any entity matches the given condition.
            </summary>
            <param name="predicate">The condition to check against.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>A task representing the asynchronous operation, with a result indicating whether an entity matching the condition exists.</returns>
            <remarks>
            This method checks if at least one entity satisfies the provided condition asynchronously.
            </remarks>
        </member>
        <member name="M:AutoLayer.Repository`1.IsEmptyAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously checks if there are any entities in the collection.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>A task representing the asynchronous operation, with a result indicating whether the collection is empty.</returns>
            <remarks>
            This method checks if there are any entities in the collection asynchronously.
            </remarks>
        </member>
        <member name="M:AutoLayer.Repository`1.CountAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously counts the total number of entities in the collection.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>A task representing the asynchronous operation, with a result of the total number of entities in the collection.</returns>
            <remarks>
            This method counts the total number of entities asynchronously in the collection.
            </remarks>
        </member>
        <member name="M:AutoLayer.Repository`1.CountWhereAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously counts the number of entities that match the given condition.
            </summary>
            <param name="predicate">The condition to match the entities against.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>A task representing the asynchronous operation, with a result of the number of entities that match the condition.</returns>
            <remarks>
            This method counts the number of entities asynchronously that satisfy the provided condition.
            </remarks>
        </member>
        <member name="M:AutoLayer.Repository`1.MaxAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously calculates the maximum value of a specified field across all entities.
            </summary>
            <param name="selector">The selector to specify which field to calculate the maximum for.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>A task representing the asynchronous operation, with a result of the maximum value of the specified field.</returns>
            <remarks>
            This method calculates the maximum value of a field asynchronously for all entities.
            </remarks>
        </member>
        <member name="M:AutoLayer.Repository`1.MaxWhereAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously calculates the maximum value of a specified field for entities that match the given condition.
            </summary>
            <param name="predicate">The condition to match the entities against.</param>
            <param name="selector">The selector to specify which field to calculate the maximum for.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>A task representing the asynchronous operation, with a result of the maximum value of the specified field for matching entities.</returns>
            <remarks>
            This method calculates the maximum value of a field asynchronously for entities that satisfy the provided condition.
            </remarks>
        </member>
        <member name="M:AutoLayer.Repository`1.MinAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously calculates the minimum value of a specified field across all entities.
            </summary>
            <param name="selector">The selector to specify which field to calculate the minimum for.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>A task representing the asynchronous operation, with a result of the minimum value of the specified field.</returns>
            <remarks>
            This method calculates the minimum value of a field asynchronously for all entities.
            </remarks>
        </member>
        <member name="M:AutoLayer.Repository`1.MinWhereAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously calculates the minimum value of a specified field for entities that match the given condition.
            </summary>
            <param name="predicate">The condition to match the entities against.</param>
            <param name="selector">The selector to specify which field to calculate the minimum for.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>A task representing the asynchronous operation, with a result of the minimum value of the specified field for matching entities.</returns>
            <remarks>
            This method calculates the minimum value of a field asynchronously for entities that satisfy the provided condition.
            </remarks>
        </member>
        <member name="M:AutoLayer.Repository`1.SumAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously calculates the sum of a specified field across all entities.
            </summary>
            <param name="selector">The selector to specify which field to calculate the sum for.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>A task representing the asynchronous operation, with a result of the sum of the specified field.</returns>
            <remarks>
            This method calculates the sum of a field asynchronously for all entities.
            </remarks>
        </member>
        <member name="M:AutoLayer.Repository`1.SumWhereAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously calculates the sum of a specified field for entities that match the given condition.
            </summary>
            <param name="predicate">The condition to match the entities against.</param>
            <param name="selector">The selector to specify which field to calculate the sum for.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>A task representing the asynchronous operation, with a result of the sum of the specified field for matching entities.</returns>
            <remarks>
            This method calculates the sum of a field asynchronously for entities that satisfy the provided condition.
            </remarks>
        </member>
        <member name="M:AutoLayer.Repository`1.AverageAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously calculates the average value of a specified field across all entities.
            </summary>
            <param name="selector">The selector to specify which field to calculate the average for.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>A task representing the asynchronous operation, with a result of the average value of the specified field.</returns>
            <remarks>
            This method calculates the average value of a field asynchronously for all entities.
            </remarks>
        </member>
        <member name="M:AutoLayer.Repository`1.AverageWhereAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously calculates the average value of a specified field for entities that match the given condition.
            </summary>
            <param name="predicate">The condition to match the entities against.</param>
            <param name="selector">The selector to specify which field to calculate the average for.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>A task representing the asynchronous operation, with a result of the average value of the specified field for matching entities.</returns>
            <remarks>
            This method calculates the average value of a field asynchronously for entities that satisfy the provided condition.
            </remarks>
        </member>
        <member name="M:AutoLayer.Repository`1.GetOrderedAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously retrieves a sorted collection of entities based on the specified order.
            </summary>
            <param name="orderBy">The expression to determine how to order the entities.</param>
            <param name="isAscending">Indicates whether the order should be ascending or descending. Default is ascending.</param>
            <param name="asNoTracking">Indicates whether the query should be tracked by the context. Default is true (no tracking).</param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>A task representing the asynchronous operation, with a result of a sorted collection of entities.</returns>
            <remarks>
            This method retrieves the entities and orders them asynchronously based on the given order expression.
            </remarks>
        </member>
        <member name="M:AutoLayer.Repository`1.GetPagedAsync(System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously retrieves a paginated collection of entities based on the specified page number and page size.
            </summary>
            <param name="pageNumber">The page number to retrieve.</param>
            <param name="pageSize">The number of entities per page.</param>
            <param name="orderBy">The expression to determine how to order the entities. Optional.</param>
            <param name="isAscending">Indicates whether the order should be ascending or descending. Default is ascending.</param>
            <param name="asNoTracking">Indicates whether the query should be tracked by the context. Default is true (no tracking).</param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>A task representing the asynchronous operation, with a result of a paginated collection of entities.</returns>
            <remarks>
            This method retrieves a page of entities based on the given page number and size, and orders them if an order expression is provided.
            </remarks>
        </member>
        <member name="M:AutoLayer.Repository`1.AddAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Asynchronously adds a new entity to the database.
            </summary>
            <param name="entityToAdd">The entity to be added.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>A task representing the asynchronous operation.</returns>
            <remarks>
            This method asynchronously adds a new entity to the database and ensures that any required context or state changes are committed.
            </remarks>
        </member>
        <member name="M:AutoLayer.Repository`1.AddRangeAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <summary>
            Asynchronously adds a range of entities to the database.
            </summary>
            <param name="entitiesToAdd">The entities to be added.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>A task representing the asynchronous operation.</returns>
            <remarks>
            This method asynchronously adds multiple entities to the database in one operation, which can be more efficient than adding them individually.
            </remarks>
        </member>
        <member name="M:AutoLayer.Repository`1.UpdateAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Asynchronously updates an existing entity in the database.
            </summary>
            <param name="entityToUpdate">The entity to be updated.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>A task representing the asynchronous operation.</returns>
            <remarks>
            This method asynchronously updates the specified entity, ensuring any changes are committed to the database.
            </remarks>
        </member>
        <member name="M:AutoLayer.Repository`1.UpdateByIdAsync(System.Int32,System.Action{`0},System.Threading.CancellationToken)">
            <summary>
            Asynchronously updates an entity by its ID in the database using a specified update action.
            </summary>
            <param name="id">The ID of the entity to update.</param>
            <param name="updateAction">The action to update the entity's properties.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>A task representing the asynchronous operation.</returns>
            <remarks>
            This method asynchronously finds the entity by its ID and applies the specified update action.
            </remarks>
        </member>
        <member name="M:AutoLayer.Repository`1.UpdateRangeAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <summary>
            Asynchronously updates a range of entities in the database.
            </summary>
            <param name="entitiesToUpdate">The entities to be updated.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>A task representing the asynchronous operation.</returns>
            <remarks>
            This method asynchronously updates multiple entities in the database at once.
            </remarks>
        </member>
        <member name="M:AutoLayer.Repository`1.UpdateWhereAsync(System.Func{`0,System.Boolean},System.Action{`0},System.Threading.CancellationToken)">
            <summary>
            Asynchronously updates entities that match a specified condition in the database.
            </summary>
            <param name="predicate">The condition to match entities.</param>
            <param name="updateAction">The action to update the matching entities.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>A task representing the asynchronous operation.</returns>
            <remarks>
            This method asynchronously updates entities that satisfy the provided predicate, applying the update action to each matching entity.
            </remarks>
        </member>
        <member name="M:AutoLayer.Repository`1.RemoveAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Asynchronously removes an entity from the database.
            </summary>
            <param name="entityToRemove">The entity to be removed.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>A task representing the asynchronous operation.</returns>
            <remarks>
            This method asynchronously removes the specified entity from the database.
            </remarks>
        </member>
        <member name="M:AutoLayer.Repository`1.RemoveByIdAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Asynchronously removes an entity from the database by its ID.
            </summary>
            <param name="id">The ID of the entity to be removed.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>A task representing the asynchronous operation.</returns>
            <remarks>
            This method asynchronously removes the entity identified by its ID from the database.
            </remarks>
        </member>
        <member name="M:AutoLayer.Repository`1.RemoveRangeAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <summary>
            Asynchronously removes a range of entities from the database.
            </summary>
            <param name="entitiesToRemove">The entities to be removed.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>A task representing the asynchronous operation.</returns>
            <remarks>
            This method asynchronously removes multiple entities from the database.
            </remarks>
        </member>
        <member name="M:AutoLayer.Repository`1.RemoveWhereAsync(System.Func{`0,System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Asynchronously removes entities that match a specified condition from the database.
            </summary>
            <param name="predicate">The condition to match entities.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>A task representing the asynchronous operation.</returns>
            <remarks>
            This method asynchronously removes entities that satisfy the provided predicate.
            </remarks>
        </member>
        <member name="M:AutoLayer.Repository`1.ExecuteTransactionAsync(System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Asynchronously executes a transaction with the specified action.
            </summary>
            <param name="action">The action to be executed inside the transaction.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>A task representing the asynchronous operation.</returns>
            <remarks>
            This method asynchronously executes a transaction, executing the specified action within the scope of the transaction.
            </remarks>
        </member>
        <member name="M:AutoLayer.Repository`1.ExecuteSqlRawAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously executes a raw SQL query and returns the result as an enumerable of entities.
            </summary>
            <param name="sqlQuery">The raw SQL query to execute.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>A task representing the asynchronous operation with the result of the query.</returns>
            <remarks>
            This method executes a raw SQL query asynchronously and returns the result as a collection of entities.
            </remarks>
        </member>
        <member name="M:AutoLayer.Repository`1.ExecuteSqlRawCommandAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously executes a raw SQL command and returns the number of rows affected.
            </summary>
            <param name="sqlQuery">The raw SQL command to execute.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>A task representing the asynchronous operation, with the number of rows affected.</returns>
            <remarks>
            This method asynchronously executes a raw SQL command (e.g., an insert, update, or delete operation) and returns
            the number of rows affected by the command. It is useful when executing commands that modify the data in the database.
            </remarks>
        </member>
        <member name="T:AutoLayer.Resources.Error">
            <summary>
              Класс ресурса со строгой типизацией для поиска локализованных строк и т.д.
            </summary>
        </member>
        <member name="P:AutoLayer.Resources.Error.ResourceManager">
            <summary>
              Возвращает кэшированный экземпляр ResourceManager, использованный этим классом.
            </summary>
        </member>
        <member name="P:AutoLayer.Resources.Error.Culture">
            <summary>
              Перезаписывает свойство CurrentUICulture текущего потока для всех
              обращений к ресурсу с помощью этого класса ресурса со строгой типизацией.
            </summary>
        </member>
        <member name="P:AutoLayer.Resources.Error.EntityNotFoundError">
            <summary>
              Ищет локализованную строку, похожую на Entity for object &apos;{0}&apos; not found..
            </summary>
        </member>
        <member name="P:AutoLayer.Resources.Error.EntityToModelError">
            <summary>
              Ищет локализованную строку, похожую на Failed to convert &apos;{0}&apos; entity to &apos;{1}&apos; model - properties differ..
            </summary>
        </member>
        <member name="P:AutoLayer.Resources.Error.ExecuteSqlRawError">
            <summary>
              Ищет локализованную строку, похожую на Failed to execute sql query: {0}.
            </summary>
        </member>
        <member name="P:AutoLayer.Resources.Error.GetPageError">
            <summary>
              Ищет локализованную строку, похожую на Page number and page size must be greater than 0..
            </summary>
        </member>
        <member name="P:AutoLayer.Resources.Error.ModelToEntityError">
            <summary>
              Ищет локализованную строку, похожую на Failed to convert &apos;{0}&apos; model to &apos;{1}&apos; entity - properties differ..
            </summary>
        </member>
        <member name="P:AutoLayer.Resources.Error.NonPositiveIdError">
            <summary>
              Ищет локализованную строку, похожую на Identifier must be greater than 0..
            </summary>
        </member>
        <member name="P:AutoLayer.Resources.Error.NullEntityError">
            <summary>
              Ищет локализованную строку, похожую на Entity &apos;{0}&apos; cannot be null..
            </summary>
        </member>
        <member name="P:AutoLayer.Resources.Error.NullEntityInCollectionError">
            <summary>
              Ищет локализованную строку, похожую на Collection &apos;{0}&apos; contains null entity..
            </summary>
        </member>
        <member name="P:AutoLayer.Resources.Error.NullPrimaryKeyError">
            <summary>
              Ищет локализованную строку, похожую на Primary key values cannot be null..
            </summary>
        </member>
        <member name="P:AutoLayer.Resources.Error.NullSqlQueryError">
            <summary>
              Ищет локализованную строку, похожую на SQL query cannot be null..
            </summary>
        </member>
        <member name="P:AutoLayer.Resources.Error.TransactionError">
            <summary>
              Ищет локализованную строку, похожую на An error occurred while executing the transaction: {0}.
            </summary>
        </member>
    </members>
</doc>
